//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MULLEREXTRABOLD.otf`.
    static let mULLEREXTRABOLDOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MULLEREXTRABOLD", pathExtension: "otf")
    
    /// `bundle.url(forResource: "MULLEREXTRABOLD", withExtension: "otf")`
    static func mULLEREXTRABOLDOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mULLEREXTRABOLDOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `MullerExtraBold`.
    static let mullerExtraBold = Rswift.FontResource(fontName: "MullerExtraBold")
    
    /// `UIFont(name: "MullerExtraBold", size: ...)`
    static func mullerExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: mullerExtraBold, size: size)
    }
    
    static func validate() throws {
      if R.font.mullerExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MullerExtraBold' could not be loaded, is 'MULLEREXTRABOLD.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `likeSelected`.
    static let likeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeSelected")
    /// Image `likeUnselected`.
    static let likeUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeUnselected")
    /// Image `login background`.
    static let loginBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "login background")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `playlist`.
    static let playlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "playlist")
    /// Image `worldwide`.
    static let worldwide = Rswift.ImageResource(bundle: R.hostingBundle, name: "worldwide")
    
    /// `UIImage(named: "likeSelected", bundle: ..., traitCollection: ...)`
    static func likeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "likeUnselected", bundle: ..., traitCollection: ...)`
    static func likeUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeUnselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login background", bundle: ..., traitCollection: ...)`
    static func loginBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playlist", bundle: ..., traitCollection: ...)`
    static func playlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playlist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "worldwide", bundle: ..., traitCollection: ...)`
    static func worldwide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.worldwide, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `AlbumDetail`.
    static let albumDetail = _R.nib._AlbumDetail()
    /// Nib `AlbumImage`.
    static let albumImage = _R.nib._AlbumImage()
    /// Nib `ArtistAlbums`.
    static let artistAlbums = _R.nib._ArtistAlbums()
    /// Nib `ArtistDetAlbums`.
    static let artistDetAlbums = _R.nib._ArtistDetAlbums()
    /// Nib `ArtistDetRelated`.
    static let artistDetRelated = _R.nib._ArtistDetRelated()
    /// Nib `ArtistDetTitle`.
    static let artistDetTitle = _R.nib._ArtistDetTitle()
    /// Nib `ArtistDetTrack`.
    static let artistDetTrack = _R.nib._ArtistDetTrack()
    /// Nib `ArtistPhoto`.
    static let artistPhoto = _R.nib._ArtistPhoto()
    /// Nib `Related`.
    static let related = _R.nib._Related()
    /// Nib `SearchCell`.
    static let searchCell = _R.nib._SearchCell()
    /// Nib `ShortBio`.
    static let shortBio = _R.nib._ShortBio()
    /// Nib `Track`.
    static let track = _R.nib._Track()
    
    /// `UINib(name: "AlbumDetail", in: bundle)`
    static func albumDetail(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.albumDetail)
    }
    
    /// `UINib(name: "AlbumImage", in: bundle)`
    static func albumImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.albumImage)
    }
    
    /// `UINib(name: "ArtistAlbums", in: bundle)`
    static func artistAlbums(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.artistAlbums)
    }
    
    /// `UINib(name: "ArtistDetAlbums", in: bundle)`
    static func artistDetAlbums(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.artistDetAlbums)
    }
    
    /// `UINib(name: "ArtistDetRelated", in: bundle)`
    static func artistDetRelated(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.artistDetRelated)
    }
    
    /// `UINib(name: "ArtistDetTitle", in: bundle)`
    static func artistDetTitle(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.artistDetTitle)
    }
    
    /// `UINib(name: "ArtistDetTrack", in: bundle)`
    static func artistDetTrack(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.artistDetTrack)
    }
    
    /// `UINib(name: "ArtistPhoto", in: bundle)`
    static func artistPhoto(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.artistPhoto)
    }
    
    /// `UINib(name: "Related", in: bundle)`
    static func related(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.related)
    }
    
    /// `UINib(name: "SearchCell", in: bundle)`
    static func searchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchCell)
    }
    
    /// `UINib(name: "ShortBio", in: bundle)`
    static func shortBio(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shortBio)
    }
    
    /// `UINib(name: "Track", in: bundle)`
    static func track(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.track)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 12 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `albumDetailCell`.
    static let albumDetailCell: Rswift.ReuseIdentifier<AlbumDetCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "albumDetailCell")
    /// Reuse identifier `albumImageCell`.
    static let albumImageCell: Rswift.ReuseIdentifier<AlbumImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "albumImageCell")
    /// Reuse identifier `artistAlbumCell`.
    static let artistAlbumCell: Rswift.ReuseIdentifier<ArtistAlbumsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "artistAlbumCell")
    /// Reuse identifier `artistDetAlbumsCell`.
    static let artistDetAlbumsCell: Rswift.ReuseIdentifier<ArtistDetAlbumsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "artistDetAlbumsCell")
    /// Reuse identifier `artistDetRelatedCell`.
    static let artistDetRelatedCell: Rswift.ReuseIdentifier<ArtistDetRelatedCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "artistDetRelatedCell")
    /// Reuse identifier `artistDetTitleCell`.
    static let artistDetTitleCell: Rswift.ReuseIdentifier<ArtistDetTitleCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "artistDetTitleCell")
    /// Reuse identifier `artistDetTrackCell`.
    static let artistDetTrackCell: Rswift.ReuseIdentifier<ArtistDetTrackCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "artistDetTrackCell")
    /// Reuse identifier `artistPhoto`.
    static let artistPhoto: Rswift.ReuseIdentifier<ArtistPhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "artistPhoto")
    /// Reuse identifier `relatedCell`.
    static let relatedCell: Rswift.ReuseIdentifier<RelatedCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "relatedCell")
    /// Reuse identifier `searchCell`.
    static let searchCell: Rswift.ReuseIdentifier<SearchTableViewCell> = Rswift.ReuseIdentifier(identifier: "searchCell")
    /// Reuse identifier `shortBioCell`.
    static let shortBioCell: Rswift.ReuseIdentifier<BioCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "shortBioCell")
    /// Reuse identifier `trackCell`.
    static let trackCell: Rswift.ReuseIdentifier<TrackTableViewCell> = Rswift.ReuseIdentifier(identifier: "trackCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `SWRevealViewController`, and contains static references to 2 segues.
    struct sWRevealViewController {
      /// Segue identifier `sw_front`.
      static let sw_front: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSegueSetController, SWRevealViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "sw_front")
      /// Segue identifier `sw_rear`.
      static let sw_rear: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSegueSetController, SWRevealViewController, MenuViewController> = Rswift.StoryboardSegueIdentifier(identifier: "sw_rear")
      
      /// Optionally returns a typed version of segue `sw_front`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sw_front(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSegueSetController, SWRevealViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sWRevealViewController.sw_front, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `sw_rear`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sw_rear(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSegueSetController, SWRevealViewController, MenuViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sWRevealViewController.sw_rear, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Artist`.
    static let artist = _R.storyboard.artist()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MainScreen`.
    static let mainScreen = _R.storyboard.mainScreen()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    
    /// `UIStoryboard(name: "Artist", bundle: ...)`
    static func artist(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.artist)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "MainScreen", bundle: ...)`
    static func mainScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainScreen)
    }
    
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menu)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 9 localization tables.
  struct string {
    /// This `R.string.artistAlbums` struct is generated, and contains static references to 1 localization keys.
    struct artistAlbums {
      /// ru translation: АЛЬБОМЫ
      /// 
      /// Locales: ru
      static let zgy2PY87Text = Rswift.StringResource(key: "zgy-2P-Y87.text", tableName: "ArtistAlbums", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: АЛЬБОМЫ
      /// 
      /// Locales: ru
      static func zgy2PY87Text(_: Void = ()) -> String {
        return NSLocalizedString("zgy-2P-Y87.text", tableName: "ArtistAlbums", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.artistDetAlbums` struct is generated, and contains static references to 2 localization keys.
    struct artistDetAlbums {
      /// ru translation: АЛЬБОМЫ
      /// 
      /// Locales: ru
      static let jZKOPAZlText = Rswift.StringResource(key: "jZK-oP-AZl.text", tableName: "ArtistDetAlbums", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Показать все →
      /// 
      /// Locales: ru
      static let g3L4kErMNormalTitle = Rswift.StringResource(key: "G3L-4k-erM.normalTitle", tableName: "ArtistDetAlbums", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: АЛЬБОМЫ
      /// 
      /// Locales: ru
      static func jZKOPAZlText(_: Void = ()) -> String {
        return NSLocalizedString("jZK-oP-AZl.text", tableName: "ArtistDetAlbums", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Показать все →
      /// 
      /// Locales: ru
      static func g3L4kErMNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("G3L-4k-erM.normalTitle", tableName: "ArtistDetAlbums", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.artistDetRelated` struct is generated, and contains static references to 2 localization keys.
    struct artistDetRelated {
      /// ru translation: ПОХОЖИЕ
      /// 
      /// Locales: ru
      static let jqe66ZrcText = Rswift.StringResource(key: "jqe-66-Zrc.text", tableName: "ArtistDetRelated", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Показать все →
      /// 
      /// Locales: ru
      static let jH7CAKJNormalTitle = Rswift.StringResource(key: "4jH-7C-aKJ.normalTitle", tableName: "ArtistDetRelated", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: ПОХОЖИЕ
      /// 
      /// Locales: ru
      static func jqe66ZrcText(_: Void = ()) -> String {
        return NSLocalizedString("jqe-66-Zrc.text", tableName: "ArtistDetRelated", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Показать все →
      /// 
      /// Locales: ru
      static func jH7CAKJNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("4jH-7C-aKJ.normalTitle", tableName: "ArtistDetRelated", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.artistDetTrack` struct is generated, and contains static references to 1 localization keys.
    struct artistDetTrack {
      /// ru translation: ТОП 5
      /// 
      /// Locales: ru
      static let bbBZm4dfText = Rswift.StringResource(key: "bbB-zm-4df.text", tableName: "ArtistDetTrack", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: ТОП 5
      /// 
      /// Locales: ru
      static func bbBZm4dfText(_: Void = ()) -> String {
        return NSLocalizedString("bbB-zm-4df.text", tableName: "ArtistDetTrack", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.artistPhoto` struct is generated, and contains static references to 3 localization keys.
    struct artistPhoto {
      /// ru translation: gg
      /// 
      /// Locales: ru
      static let s0vQfCsZText = Rswift.StringResource(key: "s0v-qf-CsZ.text", tableName: "ArtistPhoto", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Больше
      /// 
      /// Locales: ru
      static let o7uU3K0UNormalTitle = Rswift.StringResource(key: "o7u-U3-K0U.normalTitle", tableName: "ArtistPhoto", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: фаната
      /// 
      /// Locales: ru
      static let rFsPwEGlText = Rswift.StringResource(key: "RFs-Pw-EGl.text", tableName: "ArtistPhoto", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: gg
      /// 
      /// Locales: ru
      static func s0vQfCsZText(_: Void = ()) -> String {
        return NSLocalizedString("s0v-qf-CsZ.text", tableName: "ArtistPhoto", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Больше
      /// 
      /// Locales: ru
      static func o7uU3K0UNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("o7u-U3-K0U.normalTitle", tableName: "ArtistPhoto", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: фаната
      /// 
      /// Locales: ru
      static func rFsPwEGlText(_: Void = ()) -> String {
        return NSLocalizedString("RFs-Pw-EGl.text", tableName: "ArtistPhoto", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 3 localization keys.
    struct localizable {
      /// Base translation: Search artist...
      /// 
      /// Locales: Base, ru
      static let searchPlaceholder = Rswift.StringResource(key: "searchPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: albums
      /// 
      /// Locales: Base, ru
      static let albums = Rswift.StringResource(key: "albums", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: funs
      /// 
      /// Locales: Base, ru
      static let funs = Rswift.StringResource(key: "funs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      
      /// Base translation: Search artist...
      /// 
      /// Locales: Base, ru
      static func searchPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("searchPlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: albums
      /// 
      /// Locales: Base, ru
      static func albums(_: Void = ()) -> String {
        return NSLocalizedString("albums", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: funs
      /// 
      /// Locales: Base, ru
      static func funs(_: Void = ()) -> String {
        return NSLocalizedString("funs", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.login` struct is generated, and contains static references to 3 localization keys.
    struct login {
      /// ru translation: Вход
      /// 
      /// Locales: ru
      static let aNNJW8TNormalTitle = Rswift.StringResource(key: "7AN-nJ-W8T.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пропустить
      /// 
      /// Locales: ru
      static let ipFPfQDCNormalTitle = Rswift.StringResource(key: "IpF-Pf-QDC.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Я принимаю Условия и Соглашения
      /// 
      /// Locales: ru
      static let r9dBRQiANormalTitle = Rswift.StringResource(key: "R9d-BR-QiA.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Вход
      /// 
      /// Locales: ru
      static func aNNJW8TNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("7AN-nJ-W8T.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пропустить
      /// 
      /// Locales: ru
      static func ipFPfQDCNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("IpF-Pf-QDC.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Я принимаю Условия и Соглашения
      /// 
      /// Locales: ru
      static func r9dBRQiANormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("R9d-BR-QiA.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.menu` struct is generated, and contains static references to 5 localization keys.
    struct menu {
      /// ru translation: ВЫХОД
      /// 
      /// Locales: ru
      static let v2Zw8UKText = Rswift.StringResource(key: "0V2-Zw-8UK.text", tableName: "Menu", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ГЛАВНАЯ
      /// 
      /// Locales: ru
      static let av4ZVChOText = Rswift.StringResource(key: "av4-ZV-chO.text", tableName: "Menu", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ЛЮБИМЫЕ ИСПОЛНИТЕЛИ
      /// 
      /// Locales: ru
      static let lQJ7kAbhText = Rswift.StringResource(key: "LQJ-7k-abh.text", tableName: "Menu", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПОИСК
      /// 
      /// Locales: ru
      static let tABJEKText = Rswift.StringResource(key: "94t-AB-jEK.text", tableName: "Menu", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПРОФИЛЬ
      /// 
      /// Locales: ru
      static let smKZGHNZText = Rswift.StringResource(key: "smK-ZG-HNZ.text", tableName: "Menu", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: ВЫХОД
      /// 
      /// Locales: ru
      static func v2Zw8UKText(_: Void = ()) -> String {
        return NSLocalizedString("0V2-Zw-8UK.text", tableName: "Menu", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ГЛАВНАЯ
      /// 
      /// Locales: ru
      static func av4ZVChOText(_: Void = ()) -> String {
        return NSLocalizedString("av4-ZV-chO.text", tableName: "Menu", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ЛЮБИМЫЕ ИСПОЛНИТЕЛИ
      /// 
      /// Locales: ru
      static func lQJ7kAbhText(_: Void = ()) -> String {
        return NSLocalizedString("LQJ-7k-abh.text", tableName: "Menu", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПОИСК
      /// 
      /// Locales: ru
      static func tABJEKText(_: Void = ()) -> String {
        return NSLocalizedString("94t-AB-jEK.text", tableName: "Menu", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПРОФИЛЬ
      /// 
      /// Locales: ru
      static func smKZGHNZText(_: Void = ()) -> String {
        return NSLocalizedString("smK-ZG-HNZ.text", tableName: "Menu", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _Track.validate()
      try _ShortBio.validate()
    }
    
    struct _AlbumDetail: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AlbumDetCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "albumDetailCell"
      let name = "AlbumDetail"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AlbumDetCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlbumDetCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AlbumImage: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AlbumImageCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "albumImageCell"
      let name = "AlbumImage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AlbumImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlbumImageCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArtistAlbums: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArtistAlbumsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "artistAlbumCell"
      let name = "ArtistAlbums"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArtistAlbumsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArtistAlbumsCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArtistDetAlbums: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArtistDetAlbumsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "artistDetAlbumsCell"
      let name = "ArtistDetAlbums"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArtistDetAlbumsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArtistDetAlbumsCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArtistDetRelated: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArtistDetRelatedCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "artistDetRelatedCell"
      let name = "ArtistDetRelated"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArtistDetRelatedCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArtistDetRelatedCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArtistDetTitle: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArtistDetTitleCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "artistDetTitleCell"
      let name = "ArtistDetTitle"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArtistDetTitleCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArtistDetTitleCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArtistDetTrack: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArtistDetTrackCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "artistDetTrackCell"
      let name = "ArtistDetTrack"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArtistDetTrackCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArtistDetTrackCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArtistPhoto: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArtistPhotoCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "artistPhoto"
      let name = "ArtistPhoto"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArtistPhotoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArtistPhotoCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _Related: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RelatedCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "relatedCell"
      let name = "Related"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RelatedCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "searchCell"
      let name = "SearchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ShortBio: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BioCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "shortBioCell"
      let name = "ShortBio"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BioCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BioCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "likeUnselected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'likeUnselected' is used in nib 'ShortBio', but couldn't be loaded.") }
        if UIKit.UIImage(named: "playlist") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playlist' is used in nib 'ShortBio', but couldn't be loaded.") }
        if UIKit.UIImage(named: "worldwide") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'worldwide' is used in nib 'ShortBio', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _Track: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrackTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "trackCell"
      let name = "Track"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TrackTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrackTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "play") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'Track', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try artist.validate()
      try login.validate()
      try search.validate()
      try menu.validate()
      try mainScreen.validate()
    }
    
    struct artist: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let artistDetailVC = StoryboardViewControllerResource<ArtistDetailViewController>(identifier: "artistDetailVC")
      let artistVC = StoryboardViewControllerResource<ArtistViewController>(identifier: "artistVC")
      let bundle = R.hostingBundle
      let name = "Artist"
      
      func artistDetailVC(_: Void = ()) -> ArtistDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: artistDetailVC)
      }
      
      func artistVC(_: Void = ()) -> ArtistViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: artistVC)
      }
      
      static func validate() throws {
        if _R.storyboard.artist().artistDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'artistDetailVC' could not be loaded from storyboard 'Artist' as 'ArtistDetailViewController'.") }
        if _R.storyboard.artist().artistVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'artistVC' could not be loaded from storyboard 'Artist' as 'ArtistViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let loginVC = StoryboardViewControllerResource<LoginViewController>(identifier: "loginVC")
      let name = "Login"
      
      func loginVC(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "login background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login background' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mainScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let mainVC = StoryboardViewControllerResource<MainViewController>(identifier: "MainVC")
      let name = "MainScreen"
      
      func mainVC(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'MainScreen', but couldn't be loaded.") }
        if _R.storyboard.mainScreen().mainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainVC' could not be loaded from storyboard 'MainScreen' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct menu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SWRevealViewController
      
      let bundle = R.hostingBundle
      let menuVC = StoryboardViewControllerResource<SWRevealViewController>(identifier: "menuVC")
      let name = "Menu"
      
      func menuVC(_: Void = ()) -> SWRevealViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuVC)
      }
      
      static func validate() throws {
        if _R.storyboard.menu().menuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuVC' could not be loaded from storyboard 'Menu' as 'SWRevealViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Search"
      
      static func validate() throws {
        if UIKit.UIImage(named: "menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Search', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}